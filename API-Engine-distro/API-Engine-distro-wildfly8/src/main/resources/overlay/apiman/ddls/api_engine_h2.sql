DROP TABLE IF EXISTS `application_versions`;
CREATE TABLE `application_versions` (`id` bigint(20) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`modified_by` varchar(255) NOT NULL,`modified_on` datetime NOT NULL,`published_on` datetime DEFAULT NULL,`retired_on` datetime DEFAULT NULL,`status` varchar(255) NOT NULL,`version` varchar(255) NOT NULL,`app_id` varchar(255) DEFAULT NULL,`app_org_id` varchar(255) DEFAULT NULL,PRIMARY KEY (`id`),UNIQUE KEY UK_APP_VERSIONS_1_0 (`app_id`,`app_org_id`,`version`));
DROP TABLE IF EXISTS `applications`;
CREATE TABLE `applications` (`id` varchar(255) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`description` varchar(512) DEFAULT NULL,`name` varchar(255) NOT NULL,`organization_id` varchar(255) NOT NULL,`logo` longtext,PRIMARY KEY (`id`,`organization_id`),KEY IDX_FK_APPLICATIONS_1_0 (`organization_id`));
DROP TABLE IF EXISTS `auditlog`;
CREATE TABLE `auditlog` (`id` bigint(20) NOT NULL,`created_on` datetime NOT NULL,`data` longtext,`entity_id` varchar(255) DEFAULT NULL,`entity_type` varchar(255) NOT NULL,`entity_version` varchar(255) DEFAULT NULL,`organization_id` varchar(255) NOT NULL,`what` varchar(255) NOT NULL,`who` varchar(255) NOT NULL,PRIMARY KEY (`id`),KEY IDX_AUDITLOG_1_0 (`who`),KEY IDX_AUDITLOG_2_0 (`organization_id`,`entity_id`,`entity_version`,`entity_type`));
DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (`ServiceBean_id` varchar(255) NOT NULL,`ServiceBean_organization_id` varchar(255) NOT NULL,`category` varchar(255) DEFAULT NULL,KEY FK_HUASDTAL54L0ISOAUY6MRTMPX_0 (`ServiceBean_id`,`ServiceBean_organization_id`));
DROP TABLE IF EXISTS `contracts`;
CREATE TABLE `contracts` (`id` bigint(20) NOT NULL,`apikey` varchar(255) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`appv_id` bigint(20) DEFAULT NULL,`planv_id` bigint(20) DEFAULT NULL,`svcv_id` bigint(20) DEFAULT NULL,PRIMARY KEY (`id`),UNIQUE KEY UK_CONTRACTS_1_0 (`appv_id`,`svcv_id`,`planv_id`),KEY IDX_FK_CONTRACTS_P_0 (`planv_id`),KEY IDX_FK_CONTRACTS_S_0 (`svcv_id`),KEY IDX_FK_CONTRACTS_A_0 (`appv_id`));
DROP TABLE IF EXISTS `endpoint_properties`;
CREATE TABLE `endpoint_properties` (`service_version_id` bigint(20) NOT NULL,`value` varchar(255) DEFAULT NULL,`name` varchar(255) NOT NULL,PRIMARY KEY (`service_version_id`,`name`));
DROP TABLE IF EXISTS `gateways`;
CREATE TABLE `gateways` (`id` varchar(255) NOT NULL,`configuration` longtext NOT NULL,`endpoint` varchar(255) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`description` varchar(512) DEFAULT NULL,`modified_by` varchar(255) NOT NULL,`modified_on` datetime NOT NULL,`name` varchar(255) NOT NULL,`type` varchar(255) NOT NULL,PRIMARY KEY (`id`));
INSERT INTO `gateways` VALUES ('KongGateway','$CRYPT::PmrNC1m25oGSO8fC3XnxKSPWd/jWE+9t0aek3Ncv1AmHt9J5/Crf/zjkoUK8rV3RgQ70TZcQlF9oTpenEyLio2Cjt8a2HprYxahGLbMv4wA=','http://apim.t1t.be:8000','','2015-08-18 17:56:58','This is the gateway.','','2015-08-18 17:56:58','Default Kong Gateway','REST');
DROP TABLE IF EXISTS `hibernate_sequence`;
CREATE TABLE `hibernate_sequence` (`next_val` bigint(20) DEFAULT NULL);
INSERT INTO `hibernate_sequence` VALUES (999);
DROP TABLE IF EXISTS `memberships`;
CREATE TABLE `memberships` (`id` bigint(20) NOT NULL,`created_on` datetime DEFAULT NULL,`org_id` varchar(255) DEFAULT NULL,`role_id` varchar(255) DEFAULT NULL,`user_id` varchar(255) DEFAULT NULL,PRIMARY KEY (`id`),UNIQUE KEY UK_MEMBERSHIPS_1_0 (`user_id`,`role_id`,`org_id`),KEY IDX_MEMBERSHIPS_1_0 (`user_id`));
DROP TABLE IF EXISTS `organizations`;
CREATE TABLE `organizations` (`id` varchar(255) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`description` varchar(512) DEFAULT NULL,`modified_by` varchar(255) NOT NULL,`modified_on` datetime NOT NULL,`name` varchar(255) NOT NULL,PRIMARY KEY (`id`),KEY IDX_ORGANIZATIONS_1_0 (`name`));
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (`role_id` varchar(255) NOT NULL,`permissions` int(11) DEFAULT NULL,KEY IDX_FK_PERMISSIONS_1_0 (`role_id`));
INSERT INTO `permissions` VALUES ('OrganizationOwner',1),('OrganizationOwner',2),('OrganizationOwner',3),('OrganizationOwner',6),('OrganizationOwner',8),('OrganizationOwner',5),('OrganizationOwner',9),('OrganizationOwner',11),('OrganizationOwner',7),('OrganizationOwner',4),('OrganizationOwner',10),('OrganizationOwner',0),('ApplicationDeveloper',6),('ApplicationDeveloper',8),('ApplicationDeveloper',7),('ServiceDeveloper',3),('ServiceDeveloper',5),('ServiceDeveloper',9),('ServiceDeveloper',11),('ServiceDeveloper',4),('ServiceDeveloper',10);
DROP TABLE IF EXISTS `plan_versions`;
CREATE TABLE `plan_versions` (`id` bigint(20) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`locked_on` datetime DEFAULT NULL,`modified_by` varchar(255) NOT NULL,`modified_on` datetime NOT NULL,`status` varchar(255) NOT NULL,`version` varchar(255) NOT NULL,`plan_id` varchar(255) DEFAULT NULL,`plan_org_id` varchar(255) DEFAULT NULL,PRIMARY KEY (`id`),UNIQUE KEY UK_PLAN_VERSIONS_1_0 (`plan_id`,`plan_org_id`,`version`));
DROP TABLE IF EXISTS `plans`;
CREATE TABLE `plans` (`id` varchar(255) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`description` varchar(512) DEFAULT NULL,`name` varchar(255) NOT NULL,`organization_id` varchar(255) NOT NULL,PRIMARY KEY (`id`,`organization_id`),KEY IDX_FK_PLANS_1_0 (`organization_id`));
DROP TABLE IF EXISTS `plugins`;
CREATE TABLE `plugins` (`id` bigint(20) NOT NULL,`artifact_id` varchar(255) NOT NULL,`classifier` varchar(255) DEFAULT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`description` varchar(512) DEFAULT NULL,`group_id` varchar(255) NOT NULL,`name` varchar(255) NOT NULL,`type` varchar(255) DEFAULT NULL,`version` varchar(255) NOT NULL,PRIMARY KEY (`id`),UNIQUE KEY UK_PLUGINS_1_0 (`group_id`,`artifact_id`));
DROP TABLE IF EXISTS `policies`;
CREATE TABLE `policies` (`id` bigint(20) NOT NULL,`configuration` longtext,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`entity_id` varchar(255) NOT NULL,`entity_version` varchar(255) NOT NULL,`modified_by` varchar(255) NOT NULL,`modified_on` datetime NOT NULL,`name` varchar(255) NOT NULL,`order_index` int(11) NOT NULL,`organization_id` varchar(255) NOT NULL,`type` varchar(255) NOT NULL,`definition_id` varchar(255) NOT NULL,PRIMARY KEY (`id`),KEY IDX_POLICIES_1_0 (`organization_id`,`entity_id`,`entity_version`),KEY IDX_POLICIES_2_0 (`order_index`),KEY IDX_FK_POLICIES_1_0 (`definition_id`));
DROP TABLE IF EXISTS `policydefs`;
CREATE TABLE `policydefs` (`id` varchar(255) NOT NULL,`description` varchar(512) NOT NULL,`form` varchar(4096) DEFAULT NULL,`form_type` varchar(255) DEFAULT NULL,`icon` varchar(255) NOT NULL,`name` varchar(255) NOT NULL,`plugin_id` bigint(20) DEFAULT NULL,`scope_service` tinyint(1) DEFAULT NULL,`scope_plan` tinyint(1) DEFAULT NULL,`scope_auto` tinyint(1) DEFAULT NULL,PRIMARY KEY (`id`));
INSERT INTO `policydefs` VALUES ('BasicAuthentication','Add Basic Authentication to your APIs',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"Basic Authentication\",\n  \"properties\": {\n    \"hide_credentials\": {\n      \"title\": \"Hide credentials\",\n      \"description\": \"An optional boolean value telling the plugin to hide the credential to the upstream API server. It will be removed by the gateway before proxying the request.\",\n      \"type\": \"boolean\",\n      \"default\": false\n    }\n  }\n}'),'JsonSchema','fa-user','Basic Authentication Policy',NULL,1,0,0),('CORS','Allow consumers to make requests from browsers to your APIs',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"CORS\",\n  \"properties\": {\n    \"methods\": {\n      \"title\": \"Methods\",\n      \"type\": \"string\",\n      \"default\": \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n      \"description\": \"Value for the Access-Control-Allow-Methods header, expects a comma delimited string (e.g. GET,POST). Defaults to GET,HEAD,PUT,PATCH,POST,DELETE.\"\n    },\n    \"credentials\": {\n      \"title\": \"Credentials\",\n      \"description\": \"Flag to determine whether the Access-Control-Allow-Credentials header should be sent with true as the value.\",\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n      \"headers\": {\n      \"title\": \"Headers\",\n      \"type\": \"string\",\n      \"description\": \"Value for the Access-Control-Allow-Headers header, expects a comma delimited string (e.g. Origin, Authorization). Defaults to the value of the Access-Control-Request-Headers header.\",\n      \"default\": \"Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Auth-Token\"\n    },\n    \"exposed_headers\": {\n      \"title\": \"Exposed headers\",\n      \"type\": \"string\",\n      \"description\": \"Value for the Access-Control-Expose-Headers header, expects a comma delimited string (e.g. Origin, Authorization). If not specified, no custom headers are exposed.\",\n      \"default\": \"X-Auth-Token\"\n    },\n    \"origin\": {\n      \"title\": \"Origin\",\n      \"type\": \"string\",\n      \"default\": \"*\",\n      \"description\": \"Value for the Access-Control-Allow-Origin header, expects a String. Defaults to *.\"\n    },\n    \"max_age\": {\n      \"title\": \"Max age\",\n      \"type\": \"number\",\n      \"description\": \"Indicated how long the results of the preflight request can be cached, in seconds.\",\n      \"default\": 3600\n    },\n    \"preflight_continue\": {\n      \"title\": \"Preflight continue\",\n      \"type\": \"boolean\",\n      \"description\": \"A boolean value that instructs the plugin to proxy the OPTIONS preflight request to the upstream API. Defaults to false.\",\n      \"default\": false\n    }\n  }\n}'),'JsonSchema','fa-code','CORS Policy',NULL,1,0,1),('FileLog','Append request and response data to a log file on disk',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"File Log\",\n  \"properties\": {\n    \"path\": {\n      \"title\": \"Path\",\n      \"description\": \"The file path of the output log file. The plugin will create the file if it doesn''t exist yet. Make sure Kong has write permissions to this file.\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"path\"\n  ]\n}'),'JsonSchema','fa-file-text-o','File Log Policy',NULL,1,0,0),('HTTPLog','Send request and response logs to a HTTP server',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"HTTP Log\",\n  \"properties\": {\n    \"http_endpoint\": {\n      \"title\": \"HTTP Endpoint\",\n      \"description\": \"The HTTP endpoint (including the protocol to use) where to send the data to.\",\n      \"type\": \"string\"\n    },\n    \"method\": {\n      \"title\": \"HTTP Method\",\n      \"description\": \"Default POST. An optional method used to send data to the http server, other supported values are PUT, PATCH.\",\n      \"type\": \"string\",\n      \"default\": \"POST\"\n    },\n    \"keepalive\": {\n      \"title\": \"Keep alive\",\n      \"description\": \"Default 60000. An optional value in milliseconds that defines for how long an idle connection will live before being closed.\",\n      \"type\": \"number\",\n      \"default\": 60000\n    },\n    \"timeout\": {\n      \"title\": \"Time-out\",\n      \"description\": \"Default 10000. An optional timeout in milliseconds when sending data to the upstream server.\",\n      \"type\": \"number\",\n      \"default\": 10000\n    }\n  },\n  \"required\": [\n    \"http_endpoint\"\n  ]\n}'),'JsonSchema','fa-exchange','HTTP Log Policy',NULL,1,0,1),('IPRestriction','Whitelist or Blacklist IPs that can make requests',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"IP Restriction\",\n  \"properties\": {\n    \"blacklist\": {\n      \"type\": \"string\",\n      \"description\": \"Comma separated list of IPs or CIDR ranges to blacklist.\"\n    },\n    \"whitelist\": {\n      \"type\": \"string\",\n      \"description\": \"Comma separated list of IPs or CIDR ranges to whitelist.\"\n    },\n    \"_blacklist_cache\": {\n      \"type\": \"string\"\n    },\n    \"_whitelist_cache\": {\n      \"type\": \"string\"\n    }\n  }\n}'),'JsonSchema','fa-table','IP Restriction Policy',NULL,1,1,0),('KeyAuthentication','Add Key Authentication to your APIs',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"Key Authentication\",\n  \"properties\": {\n    \"key_names\": {\n      \"title\": \"Key name\",\n      \"type\": \"string\",\n      \"default\": \"apikey\",\n      \"description\":\"Describes an array of comma separated parameter names where the plugin will look for a valid credential. The client must send the authentication key in one of those key names, and the plugin will try to read the credential from a header, the querystring, a form parameter (in this order).\"\n    },\n    \"hide_credentials\": {\n      \"title\": \"Hide credentials\",\n      \"description\":\"An optional boolean value telling the plugin to hide the credential to the upstream API server. It will be removed by the gateway before proxying the request.\",\n      \"type\": \"boolean\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"key_names\"\n  ]\n}'),'JsonSchema','fa-key','Key Authentication Policy',NULL,1,0,1),('OAuth2','Add an OAuth2 Authentication to your APIs',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"OAuth2\",\n  \"properties\": {\n    \"scopes\": {\n      \"title\": \"Scopes\",\n      \"type\": \"string\",\n      \"default\": \"user,admin\",\n      \"description\": \"Describes an array of comma separated scope names that will be available to the end user.\"\n    },\n    \"mandatory_scope\": {\n      \"title\": \"Mandatory scope\",\n      \"type\": \"boolean\",\n      \"func\": \"function\",\n      \"default\": false,\n      \"description\": \"An optional boolean value telling the plugin to require at least one scope to be authorized by the end user.\"\n    },\n    \"token_expiration\": {\n      \"title\": \"Token expiration\",\n      \"type\": \"number\",\n      \"default\": 7200,\n      \"description\": \"An optional integer value telling the plugin how long should a token last, after which the client will need to refresh the token. Set to 0 to disable the expiration.\"\n    },\n    \"enable_authorization_code\": {\n      \"title\": \"Enable Authorization Code Grant\",\n      \"type\": \"boolean\",\n      \"default\": true,\n      \"description\": \"An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).\"\n    },\n    \"enable_implicit_grant\": {\n      \"title\": \"Enable Implicit Grant\",\n      \"type\": \"boolean\",\n      \"default\": false,\n      \"description\": \"An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).\"\n    },\n    \"enable_client_credentials\": {\n      \"title\": \"Enable Client Credentials Grant\",\n      \"type\": \"boolean\",\n      \"default\": false,\n      \"description\": \"An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).\"\n    },\n    \"enable_password_grant\": {\n      \"title\": \"Enable Resource Owner Password Grant\",\n      \"type\": \"boolean\",\n      \"default\": false,\n      \"description\": \"An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).\"\n    },\n    \"hide_credentials\": {\n      \"title\": \"Hide credentials\",\n      \"type\": \"boolean\",\n      \"default\": false,\n      \"description\": \"An optional boolean value telling the plugin to hide the credential to the upstream API server. It will be removed by Kong before proxying the request.\"\n    },\n    \"provision_key\": {\n      \"title\": \"Provisioning key\",\n      \"unique\": true,\n      \"func\": \"function\",\n      \"type\": \"string\",\n      \"description\": \"TBD\"\n    }\n  },\n  \"required\": [\n    \"mandatory_scope\",\n    \"token_expiration\",\n    \"enable_implicit_grant\"\n  ]\n}'),'JsonSchema','fa-sign-in','OAuth2 Policy',NULL,1,0,0),('RateLimiting','Rate-limit how many HTTP requests a consumer can make',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"Rate Limiting\",\n  \"properties\": {\n    \"day\": {\n      \"title\": \"Day(s)\",\n      \"description\": \"The amount of HTTP requests the developer can make per day. At least one limit must exist.\",\n      \"type\": \"number\"\n    },\n    \"minute\": {\n      \"title\": \"Minute(s)\",\n      \"description\": \"The amount of HTTP requests the developer can make per minute. At least one limit must exist.\",\n      \"type\": \"number\"\n    },\n    \"second\": {\n      \"title\": \"Second(s)\",\n      \"description\": \"The amount of HTTP requests the developer can make per second. At least one limit must exist.\",\n      \"type\": \"number\"\n    },\n    \"hour\": {\n      \"title\": \"Hour(s)\",\n      \"description\": \"The amount of HTTP requests the developer can make per hour. At least one limit must exist.\",\n      \"type\": \"number\"\n    },\n    \"month\": {\n      \"title\": \"Month(s)\",\n      \"description\": \"The amount of HTTP requests the developer can make per month. At least one limit must exist.\",\n      \"type\": \"number\"\n    },\n    \"year\": {\n      \"title\": \"Year(s)\",\n      \"description\": \"The amount of HTTP requests the developer can make per year. At least one limit must exist.\",\n      \"type\": \"number\"\n    }\n  }\n}'),'JsonSchema','fa-tachometer','Rate Limiting Policy',NULL,1,1,0),('RequestSizeLimiting','Block requests with bodies greater than a specific size',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"Request Size Limiting\",\n  \"properties\": {\n    \"allowed_payload_size\": {\n      \"title\": \"Allowed payload size\",\n      \"description\": \"Allowed request payload size in megabytes, default is 128 (128 000 000 Bytes)\",\n      \"type\": \"number\",\n      \"default\": 128\n    }\n  }\n}'),'JsonSchema','fa-compress','Request Size Limiting Policy',NULL,1,1,0),('RequestTransformer','Modify the request before hitting the upstream sever',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"Request Transformer\",\n  \"properties\": {\n    \"remove\": {\n      \"title\": \"Remove from request\",\n      \"type\": \"object\",\n      \"properties\": {\n          \"querystring\": {\n            \"title\": \"Querystring\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of parameter names to remove from the request querystring.\"\n          },\n          \"form\": {\n            \"title\": \"Form\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of parameter names to remove from the request body.\"\n          },\n          \"headers\": {\n            \"title\": \"Header\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of header names to remove from the request.\"\n          }\n      }\n    },\n    \"add\": {\n      \"title\": \"Add to request\",\n      \"type\": \"object\",\n      \"properties\": {\n          \"querystring\": {\n            \"title\": \"Query\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of paramname:value to add to the request querystring.\"\n          },\n          \"form\": {\n            \"title\": \"Form\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of paramname:value to add to the request body in urlencoded format.\"\n          },\n          \"headers\": {\n            \"title\": \"Header\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of headername:value to add to the request headers.\"\n          }\n      }\n    }\n  }\n}'),'JsonSchema','fa-chevron-circle-right','Request Transformer Policy',NULL,1,0,0),('ResponseTransformer','Modify the upstream response before returning it to the client',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"Response Transformer\",\n  \"properties\": {\n    \"remove\": {\n      \"title\": \"Remove from request\",\n      \"type\": \"object\",\n      \"properties\": {\n          \"headers\": {\n            \"title\": \"Header\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of header names to remove from the response headers.\"\n          },\n          \"json\": {\n            \"title\": \"JSON\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of JSON key names to remove from a JSON response body.\"\n          }\n      }\n    },\n    \"add\": {\n      \"title\": \"Add to request\",\n      \"type\": \"object\",\n      \"properties\": {\n          \"headers\": {\n            \"title\": \"Header\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of headername:value to add to the response headers.\"\n          },\n          \"json\": {\n            \"title\": \"JSON\",\n            \"type\": \"string\",\n            \"description\": \"Comma separated list of jsonkey:value to add to a JSON response body.\"\n          }\n      }\n    }\n  }\n}'),'JsonSchema','fa-chevron-circle-left','Response Transformer Policy',NULL,1,0,0),('SSL','Add an SSL certificate for an underlying service',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"SSL\",\n  \"properties\": {\n    \"_cert_der_cache\": {\n      \"title\": \"Certificate DER cache\",\n      \"type\": \"string\",\n      \"description\": \"TBD.\"\n    },\n    \"cert\": {\n      \"title\": \"Certificate\",\n      \"description\": \"Specify the path of the certificate file to upload.\",\n      \"type\": \"string\"\n    },\n    \"only_https\": {\n      \"title\": \"Only HTTPS allowed\",\n      \"description\": \"Specify if the service should only be available through an https protocol.\",\n      \"type\": \"boolean\",\n      \"default\": false\n    },\n    \"key\": {\n      \"title\": \"Key\",\n      \"type\": \"string\",\n      \"description\": \"Specify the path of the certificate key file to upload\"\n    },\n    \"_key_der_cache\": {\n      \"title\": \"Key DER cache\",\n      \"type\": \"string\",\n      \"description\": \"TBD.\"\n    }\n  },\n  \"required\": [\n    \"cert\",\n    \"key\"\n  ]\n}'),'JsonSchema','fa-lock','SSL Policy',NULL,1,0,0),('TCPLog','Send request and response logs to a TCP server',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"TCP Log\",\n  \"properties\": {\n    \"host\": {\n      \"title\": \"Host\",\n      \"description\": \"The IP address or host name to send data to.\",\n      \"type\": \"string\"\n    },\n    \"keepalive\": {\n      \"title\": \"Keep alive\",\n      \"description\": \"Default 60000. An optional value in milliseconds that defines for how long an idle connection will live before being closed.\",\n      \"type\": \"number\",\n      \"default\": 60000\n    },\n    \"timeout\": {\n      \"title\": \"Time-out\",\n      \"description\": \"Default 10000. An optional timeout in milliseconds when sending data to the upstream server.\",\n      \"type\": \"number\",\n      \"default\": 10000\n    },\n    \"port\": {\n      \"title\": \"Port\",\n      \"description\": \"The port to send data to on the upstream server.\",\n      \"type\": \"number\"\n    }\n  },\n  \"required\": [\n    \"host\",\"port\"\n  ]\n}'),'JsonSchema','fa-random','TCP Log Policy',NULL,1,0,0),('UDPLog','Send request and response logs to a UDP server',STRINGDECODE('{\n  \"type\": \"object\",\n  \"title\": \"UDP Log\",\n  \"properties\": {\n    \"host\": {\n      \"title\": \"Host\",\n      \"description\": \"The IP address or host name to send data to.\",\n      \"type\": \"string\"\n    },\n    \"timeout\": {\n      \"title\": \"Time-out\",\n      \"description\": \"Default 10000. An optional timeout in milliseconds when sending data to the upstream server.\",\n      \"type\": \"number\",\n      \"default\": 10000\n    },\n    \"port\": {\n      \"title\": \"Port\",\n      \"description\": \"The port to send data to on the upstream server.\",\n      \"type\": \"number\"\n    }\n  },\n  \"required\": [\n    \"host\",\"port\"\n  ]\n}'),'JsonSchema','fa-crosshairs','UDP Log Policy',NULL,1,0,0);
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (`id` varchar(255) NOT NULL,`auto_grant` bit(1) DEFAULT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`description` varchar(512) DEFAULT NULL,`name` varchar(255) DEFAULT NULL,PRIMARY KEY (`id`));
INSERT INTO `roles` VALUES ('ApplicationDeveloper',NULL,'admin','2015-06-18 17:56:58','Users responsible for creating and managing applications should be granted this role within an Organization.','Application Developer'),('OrganizationOwner','','admin','2015-06-18 17:56:57','Automatically granted to the user who creates an Organization.  Grants all privileges.','Organization Owner'),('ServiceDeveloper',NULL,'admin','2015-06-18 17:56:58','Users responsible for creating and managing services should be granted this role within an Organization.','Service Developer');
DROP TABLE IF EXISTS `service_defs`;
CREATE TABLE `service_defs` (`id` bigint(20) NOT NULL,`data` longblob,`service_version_id` bigint(20) DEFAULT NULL,PRIMARY KEY (`id`),UNIQUE KEY UK_SERVICE_DEFS_1_0 (`service_version_id`));
DROP TABLE IF EXISTS `service_versions`;
CREATE TABLE `service_versions` (`id` bigint(20) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`definition_type` varchar(255) DEFAULT NULL,`endpoint` varchar(255) DEFAULT NULL,`endpoint_type` varchar(255) DEFAULT NULL,`modified_by` varchar(255) NOT NULL,`modified_on` datetime NOT NULL,`public_service` bit(1) NOT NULL,`published_on` datetime DEFAULT NULL,`retired_on` datetime DEFAULT NULL,`status` varchar(255) NOT NULL,`version` varchar(255) DEFAULT NULL,`service_id` varchar(255) DEFAULT NULL,`service_org_id` varchar(255) DEFAULT NULL,PRIMARY KEY (`id`),UNIQUE KEY UK_SERVICE_VERSIONS_1_0 (`service_id`,`service_org_id`,`version`));
DROP TABLE IF EXISTS `services`;
CREATE TABLE `services` (`id` varchar(255) NOT NULL,`created_by` varchar(255) NOT NULL,`created_on` datetime NOT NULL,`description` varchar(512) DEFAULT NULL,`name` varchar(255) NOT NULL,`basepath` varchar(255) NOT NULL,`organization_id` varchar(255) NOT NULL,PRIMARY KEY (`id`,`organization_id`),KEY IDX_SERVICES_1_0 (`name`),KEY IDX_FK_SERVICES_1_0 (`organization_id`));
DROP TABLE IF EXISTS `svc_gateways`;
CREATE TABLE `svc_gateways` (`service_version_id` bigint(20) NOT NULL,`gateway_id` varchar(255) NOT NULL,PRIMARY KEY (`service_version_id`,`gateway_id`));
DROP TABLE IF EXISTS `svc_plans`;
CREATE TABLE `svc_plans` (`service_version_id` bigint(20) NOT NULL,`plan_id` varchar(255) NOT NULL,`version` varchar(255) NOT NULL,PRIMARY KEY (`service_version_id`,`plan_id`,`version`));
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (`username` varchar(255) NOT NULL,`email` varchar(255) DEFAULT NULL,`full_name` varchar(255) DEFAULT NULL,`joined_on` datetime DEFAULT NULL,`admin` tinyint(1) DEFAULT '0',PRIMARY KEY (`username`),KEY IDX_USERS_1_0 (`username`),KEY IDX_USERS_2_0 (`full_name`));
INSERT INTO `users` VALUES ('admin','admin@example.org','Admin','2015-06-18 17:56:55',1);
ALTER TABLE `application_versions` ADD CONSTRAINT `FK_8epnoby31bt7xakegakigpikp` FOREIGN KEY (`app_id`,`app_org_id`) REFERENCES `applications` (`id`,`organization_id`);
ALTER TABLE `applications` ADD CONSTRAINT `FK_jenpu34rtuncsgvtw0sfo8qq9` FOREIGN KEY (`organization_id`) REFERENCES `organizations` (`id`);
ALTER TABLE `categories` ADD CONSTRAINT `categories_ibfk_1` FOREIGN KEY (`ServiceBean_id`,`ServiceBean_organization_id`) REFERENCES `services` (`id`,`organization_id`);
ALTER TABLE `contracts` ADD CONSTRAINT `FK_6h06sgs4dudh1wehmk0us973g` FOREIGN KEY (`appv_id`) REFERENCES `application_versions` (`id`);
ALTER TABLE `contracts` ADD CONSTRAINT `FK_8o6t1f3kg96rxy5uv51f6k9fy` FOREIGN KEY (`svcv_id`) REFERENCES `service_versions` (`id`);
ALTER TABLE `contracts` ADD CONSTRAINT `FK_nyw8xu6m8cx4rwwbtrxbjneui` FOREIGN KEY (`planv_id`) REFERENCES `plan_versions` (`id`);
ALTER TABLE `endpoint_properties` ADD CONSTRAINT `FK_gn0ydqur10sxuvpyw2jvv4xxb` FOREIGN KEY (`service_version_id`) REFERENCES `service_versions` (`id`);
ALTER TABLE `permissions` ADD CONSTRAINT `FK_sq51ihfrapwdr98uufenhcocg` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`);
ALTER TABLE `plan_versions` ADD CONSTRAINT `FK_tonylvm2ypnq3efxqr1g0m9fs` FOREIGN KEY (`plan_id`,`plan_org_id`) REFERENCES `plans` (`id`,`organization_id`);
ALTER TABLE `plans` ADD CONSTRAINT `FK_lwhc7xrdbsun1ak2uvfu0prj8` FOREIGN KEY (`organization_id`) REFERENCES `organizations` (`id`);
ALTER TABLE `policies` ADD CONSTRAINT `FK_l4q6we1bos1yl9unmogei6aja` FOREIGN KEY (`definition_id`) REFERENCES `policydefs` (`id`);
ALTER TABLE `service_defs` ADD CONSTRAINT `FK_81fuw1n8afmvpw4buk7l4tyxk` FOREIGN KEY (`service_version_id`) REFERENCES `service_versions` (`id`);
ALTER TABLE `service_versions` ADD CONSTRAINT `FK_92erjg9k1lni97gd87nt6tq37` FOREIGN KEY (`service_id`,`service_org_id`) REFERENCES `services` (`id`,`organization_id`);
ALTER TABLE `services` ADD CONSTRAINT `FK_31hj3xmhp1wedxjh5bklnlg15` FOREIGN KEY (`organization_id`) REFERENCES `organizations` (`id`);
ALTER TABLE `svc_gateways` ADD CONSTRAINT `FK_p5dm3cngljt6yrsnvc7uc6a75` FOREIGN KEY (`service_version_id`) REFERENCES `service_versions` (`id`);
ALTER TABLE `svc_plans` ADD CONSTRAINT `FK_t7uvfcsswopb9kh8wpa86blqr` FOREIGN KEY (`service_version_id`) REFERENCES `service_versions` (`id`);
